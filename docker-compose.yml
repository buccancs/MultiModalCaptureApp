# Multi-Modal Recording System - Docker Compose Configuration
# Production deployment orchestration for the complete system

version: '3.8'

services:
  # PC Controller Application
  pc-controller:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: multimodal-pc-controller
    restart: unless-stopped
    ports:
      - "5000:5000"    # Dashboard web interface
      - "8888:8888"    # Device communication port
      - "8889:8889"    # Device discovery port
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./exports:/app/exports
      - ./config:/app/config:ro
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DASHBOARD_HOST=0.0.0.0
      - DASHBOARD_PORT=5000
      - DEVICE_PORT=8888
      - DISCOVERY_PORT=8888
      - MAX_DEVICES=${MAX_DEVICES:-10}
      - SYNC_INTERVAL=${SYNC_INTERVAL:-30}
      - ANALYTICS_ENABLED=${ANALYTICS_ENABLED:-true}
    networks:
      - multimodal-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session storage (optional)
  redis:
    image: redis:7-alpine
    container_name: multimodal-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - multimodal-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data storage (optional)
  postgres:
    image: postgres:15-alpine
    container_name: multimodal-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-multimodal}
      - POSTGRES_USER=${POSTGRES_USER:-multimodal}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-multimodal_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - multimodal-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-multimodal}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: multimodal-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - multimodal-network
    depends_on:
      - pc-controller
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: multimodal-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - multimodal-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: multimodal-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - multimodal-network
    depends_on:
      - prometheus

networks:
  multimodal-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local